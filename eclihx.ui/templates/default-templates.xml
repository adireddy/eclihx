<?xml version="1.0" encoding="UTF-8"?>

<templates>

<template name="fora" description="Iterate over array with index" id="eclihx.ui.templates.for_array" 
		context="haxe-statements" enabled="true" autoinsert="false">for (${index:link(i,j,k)} in 0...${array}.length) {
	${cursor}
}</template>

<template name="fortemp" description="Iterate over array with temp variable" id="eclihx.ui.templates.for_array_temp" 
		context="haxe-statements" enabled="true" autoinsert="false">for (${index:link(i,j,k)} in 0...${array}.length) {
	var ${temp} = ${array}[${index}];
	${cursor}
}</template>

<template name="forrange" description="Iterate over range" id="eclihx.ui.templates.for_range" 
		context="haxe-statements" 
		enabled="true" autoinsert="false">for (${index:link(i,j,k,number,index)} in ${lbound}...${ubound}) {
	${cursor}
}</template>

<template name="foreach" description="Iterate over collection" id="eclihx.ui.templates.for_each" 
		context="haxe-statements" 
		enabled="true" autoinsert="false">for (${elem} in ${collection}) {
	${cursor}
}</template>

<template name="if" description="If statement" id="eclihx.ui.templates.if" context="haxe-statements" enabled="true" autoinsert="false">if (${condition}) {
	${cursor}
}</template>

<template name="ifelse" description="If-Else statement" id="eclihx.ui.templates.ifelse" 
		context="haxe-statements" enabled="true" autoinsert="false">if (${condition}) {
	${cursor}
} else {
	
}</template>

<template name="elseif" description="Else-If block" id="eclihx.ui.templates.elseif" context="haxe-statements" enabled="true" autoinsert="false">else if (${condition}) {
	${cursor}
}</template>

<template name="else" description="Else block" id="eclihx.ui.templates.else" context="haxe-statements" enabled="true" autoinsert="false">else {
	${cursor}
}</template>

<template name="switch" description="Switch expression with single case" id="eclihx.ui.templates.switch" 
		context="haxe-statements" enabled="true" autoinsert="false">switch (${condition}) {
case ${value}:	
	${cursor}
}</template>

<template name="try" description="Try and cacth blocks" id="eclihx.ui.templates.try" 
		context="haxe-statements" enabled="true" autoinsert="false">try {
	${cursor}
} catch (${exception:link(e, exc)} : ${ExceptionType}) {
	// TODO: handle exception
}</template>

<template name="while" description="While block" id="eclihx.ui.templates.while" 
		context="haxe-statements" enabled="true" autoinsert="false">while (${condition}) {
	${cursor}
}</template>

<template name="do" description="Do-While block" id="eclihx.ui.templates.dowhile" 
		context="haxe-statements" enabled="true" autoinsert="false">do {
	${cursor}
} while (${condition});</template>

<template name="main" description="An entry point for haxe program" id="eclihx.ui.templates.main" context="haxe-members" enabled="true" autoinsert="false">public static function main() {
	${cursor}
}</template>

<template name="funm" description="Insert method without explicit type" id="eclihx.ui.templates.function" context="haxe-members" enabled="true" autoinsert="false"
>${visibility:link(public,private)} function ${name}(${params}) {
	${cursor}
}</template>

<template name="funmt" description="Insert method with explicit return type" id="eclihx.ui.templates.function_typed" context="haxe-members" enabled="true" autoinsert="false"
>${visibility:link(public,private)} function ${name}(${params}) : ${type} {
	${cursor}
}</template>

<template name="field" description="Insert local variable definition" id="eclihx.ui.templates.field" 
		context="haxe-members" enabled="true" autoinsert="false">${visibility:link(public,private)} var ${name} : ${type};
${cursor}</template>


<template name="var" description="Insert local variable definition" id="eclihx.ui.templates.field" 
		context="haxe-members" enabled="true" autoinsert="false">var ${name};
${cursor}</template>

<template name="vara" description="Insert variable definition with initial value" id="eclihx.ui.templates.local_typed_default" 
		context="haxe-members" enabled="true" autoinsert="false">var ${name} = ${value};
${cursor}</template>

<template name="vart" description="Insert local variable definition with explicit type" id="eclihx.ui.templates.local_typed" 
		context="haxe-members" enabled="true" autoinsert="false">var ${name} : ${type};
${cursor}</template>

<template name="varta" description="Insert local variable definition with type and initial value" id="eclihx.ui.templates.local_default" 
		context="haxe-members" enabled="true" autoinsert="false">var ${name} : ${type} = ${value};
${cursor}</template>
		
<template name="class" description="Class definition" id="eclihx.ui.templates.class" 
		context="haxe-members" enabled="true" autoinsert="false"
>class ${name} {
	${cursor}
}</template>

<template name="interface" description="Interface definition" id="eclihx.ui.templates.interface" 
		context="haxe-members" enabled="true" autoinsert="false"
>interface ${name} {
	${cursor}
}</template>

<template name="property" description="Class property" id="eclihx.ui.templates.property" 
		context="haxe-members" enabled="true" autoinsert="false"
>${visibility:link(public,private)} var ${name}(${getter:link(default,null,dynamic,never)}, ${setter:link(default,null,dynamic,never)}) : ${type};
${cursor}</template>

<template name="enum" description="Enumeration" id="eclihx.ui.templates.enum" 
		context="haxe-members" enabled="true" autoinsert="false"
>enum ${name} {
	${first_field};
	${second_field};
	${cursor}
}</template>

<template name="constructor" description="Type constructor" id="eclihx.ui.templates.constructor" 
		context="haxe-members" enabled="true" autoinsert="false"
>${visibility:link(public,private)} function new(${params}) {
	${cursor}
}</template>	

</templates>
