<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
		<echo message="${id}"/>

		<ant antfile="${genericTargets}" target="${target}" >
			<property name="type" value="feature" />
			<property name="id" value="eclihx.feature.tests" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the repositories have been processed -->
	<!-- ===================================================================== -->
	<target name="postProcessRepos">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<property name="UpdateSiteStagingLocation" value="${buildDirectory}/UpdateSite"/>
		<property name="sitePackagePrefix" value="org.eclihx.updatesite"/>
		<antcall target="generateUpdateSite"/>
		<antcall target="test"/>
		<antcall target="gatherLogs" />
	</target>

	<target name="generateUpdateSite">
		<!-- Create the directory structure -->
		<mkdir dir="${UpdateSiteStagingLocation}"/>
		<mkdir dir="${UpdateSiteStagingLocation}/features"/>
		<mkdir dir="${UpdateSiteStagingLocation}/plugins"/>
		<!-- Build the jar files -->
		<echo message="${allElementsFile}"/>
		<antcall target="allElements">
			<param name="genericTargets" value="${builder}/customTargets.xml"/>
			<param name="target" value="updateSiteExport"/>
		</antcall>
		<antcall target="copySiteXml"/>
	</target>

	<target name="updateSiteExport">
		<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
			<property name="feature.destination" value="${UpdateSiteStagingLocation}/features"/>
			<property name="plugin.destination" value="${UpdateSiteStagingLocation}/plugins"/>
		</ant>
	</target>

	<target name="copySiteXml">
		<!-- Should be already copied with build.xml -->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
		<echo message="Setting up tests in ${eclipseAutomatedTestHome}" />
		
		<delete dir="${eclipseAutomatedTestHome}"/>
		<mkdir dir="${eclipseAutomatedTestHome}"/>

		<property name="eclihxFeaturePath" value="${eclipseAutomatedTestHome}/eclipse.feature.zip" />
		<property name="eclihxFeatureTestsPath" value="${eclipseAutomatedTestHome}/eclipse.feature.tests.zip" />
		
		<copy file="${buildDirectory}/${buildLabel}/eclihx.feature-${buildId}.zip" tofile="${eclihxFeaturePath}" />
		<copy file="${buildDirectory}/${buildLabel}/eclihx.feature.tests-${buildId}.zip" tofile="${eclihxFeatureTestsPath}" />
		
		<echo message="Unpack testing environment and installing features" />
		<unzip dest="${eclipseAutomatedTestHome}/tested_eclipse" src="${eclipseEnvironmentZipPath}"/>
		<unzip dest="${eclipseAutomatedTestHome}/tested_eclipse" src="${eclipseTestingFrameworkZipPath}"/>
		<unzip dest="${eclipseAutomatedTestHome}/tested_eclipse" src="${eclihxFeaturePath}"/>
		<unzip dest="${eclipseAutomatedTestHome}/tested_eclipse" src="${eclihxFeatureTestsPath}"/>
		
		<property name="testEclipseFolder" value="${eclipseAutomatedTestHome}/tested_eclipse/eclipse" />		
		<property name="library-file" value="${eclipseAutomatedTestHome}/tested_eclipse/eclipse/plugins/${eclipseTestPluginFolderName}/library.xml" />
		
		<antcall target="run-ui-test">
			<param name="test.library-ant-path" value="${library-file}" />
			<param name="test.eclipse-folder" value="${testEclipseFolder}" />
            <param name="test.plugin" value="eclihx.tests" />
            <param name="test.classname" value="eclihx.tests.AllTests" />
			<param name="test.timeout" value="60000" />
        </antcall>
	</target>
	
	<target name="run-ui-test">
		<ant target="ui-test" antfile="${test.library-ant-path}" dir="${test.eclipse-folder}">
	        <property name="timeout" value="${test.timeout}" />
	        <property name="os" value="${baseos}" />
	        <property name="ws" value="${basews}" />
	        <property name="arch" value="${basearch}" />
	        <property name="eclipse-home" value="${test.eclipse-folder}" />
	        <property name="data-dir" value="${test.eclipse-folder}/junit-workspace -clean" />
	        <property name="plugin-name" value="${test.plugin}" />
	        <property name="classname" value="${test.classname}" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
