/*
* generated by Xtext
*/
grammar InternalHXml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eclihx.hxml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eclihx.hxml.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import eclihx.hxml.services.HXmlGrammarAccess;

}

@parser::members {
 
 	private HXmlGrammarAccess grammarAccess;
 	
    public InternalHXmlParser(TokenStream input, IAstFactory factory, HXmlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("eclihx/hxml/parser/antlr/internal/InternalHXml.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getElementsTypeParserRuleCall_0(), currentNode); 
	    }
	    lv_elements_0=ruleType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_0, "Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*;





// Entry rule entryRuleClasspath
entryRuleClasspath returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClasspathRule(), currentNode); }
	 iv_ruleClasspath=ruleClasspath 
	 { $current=$iv_ruleClasspath.current; } 
	 EOF 
;

// Rule Classpath
ruleClasspath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-cp' 
    {
        createLeafNode(grammarAccess.getClasspathAccess().getCpKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClasspathAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClasspathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleJavascript
entryRuleJavascript returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getJavascriptRule(), currentNode); }
	 iv_ruleJavascript=ruleJavascript 
	 { $current=$iv_ruleJavascript.current; } 
	 EOF 
;

// Rule Javascript
ruleJavascript returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-js' 
    {
        createLeafNode(grammarAccess.getJavascriptAccess().getJsKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getJavascriptAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJavascriptRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSwf
entryRuleSwf returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSwfRule(), currentNode); }
	 iv_ruleSwf=ruleSwf 
	 { $current=$iv_ruleSwf.current; } 
	 EOF 
;

// Rule Swf
ruleSwf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-swf' 
    {
        createLeafNode(grammarAccess.getSwfAccess().getSwfKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getSwfAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSwf9
entryRuleSwf9 returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSwf9Rule(), currentNode); }
	 iv_ruleSwf9=ruleSwf9 
	 { $current=$iv_ruleSwf9.current; } 
	 EOF 
;

// Rule Swf9
ruleSwf9 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-swf9' 
    {
        createLeafNode(grammarAccess.getSwf9Access().getSwf9Keyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getSwf9Access().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwf9Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleNeko
entryRuleNeko returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNekoRule(), currentNode); }
	 iv_ruleNeko=ruleNeko 
	 { $current=$iv_ruleNeko.current; } 
	 EOF 
;

// Rule Neko
ruleNeko returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-neko' 
    {
        createLeafNode(grammarAccess.getNekoAccess().getNekoKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getNekoAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNekoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRulePhp
entryRulePhp returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPhpRule(), currentNode); }
	 iv_rulePhp=rulePhp 
	 { $current=$iv_rulePhp.current; } 
	 EOF 
;

// Rule Php
rulePhp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-php' 
    {
        createLeafNode(grammarAccess.getPhpAccess().getPhpKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPhpAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPhpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleCpp
entryRuleCpp returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCppRule(), currentNode); }
	 iv_ruleCpp=ruleCpp 
	 { $current=$iv_ruleCpp.current; } 
	 EOF 
;

// Rule Cpp
ruleCpp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-cpp' 
    {
        createLeafNode(grammarAccess.getCppAccess().getCppKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCppAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCppRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleXml
entryRuleXml returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getXmlRule(), currentNode); }
	 iv_ruleXml=ruleXml 
	 { $current=$iv_ruleXml.current; } 
	 EOF 
;

// Rule Xml
ruleXml returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-xml' 
    {
        createLeafNode(grammarAccess.getXmlAccess().getXmlKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getXmlAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMainRule(), currentNode); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-main' 
    {
        createLeafNode(grammarAccess.getMainAccess().getMainKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getMainAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleLib
entryRuleLib returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLibRule(), currentNode); }
	 iv_ruleLib=ruleLib 
	 { $current=$iv_ruleLib.current; } 
	 EOF 
;

// Rule Lib
ruleLib returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-lib' 
    {
        createLeafNode(grammarAccess.getLibAccess().getLibKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getLibAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleFlag
entryRuleFlag returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFlagRule(), currentNode); }
	 iv_ruleFlag=ruleFlag 
	 { $current=$iv_ruleFlag.current; } 
	 EOF 
;

// Rule Flag
ruleFlag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-D' 
    {
        createLeafNode(grammarAccess.getFlagAccess().getDKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getFlagAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleVerbose
entryRuleVerbose returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVerboseRule(), currentNode); }
	 iv_ruleVerbose=ruleVerbose 
	 { $current=$iv_ruleVerbose.current; } 
	 EOF 
;

// Rule Verbose
ruleVerbose returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-v' 
    {
        createLeafNode(grammarAccess.getVerboseAccess().getVKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getVerboseAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVerboseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleDebug
entryRuleDebug returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDebugRule(), currentNode); }
	 iv_ruleDebug=ruleDebug 
	 { $current=$iv_ruleDebug.current; } 
	 EOF 
;

// Rule Debug
ruleDebug returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('-debug' 
    {
        createLeafNode(grammarAccess.getDebugAccess().getDebugKeyword_0(), null); 
    }
(	
	
	    lv_value_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getDebugAccess().getValueSTRINGTerminalRuleCall_1_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDebugRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getClasspathParserRuleCall_0(), currentNode); 
    }
    this_Classpath_0=ruleClasspath
    { 
        $current = $this_Classpath_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getJavascriptParserRuleCall_1(), currentNode); 
    }
    this_Javascript_1=ruleJavascript
    { 
        $current = $this_Javascript_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getSwfParserRuleCall_2(), currentNode); 
    }
    this_Swf_2=ruleSwf
    { 
        $current = $this_Swf_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getSwf9ParserRuleCall_3(), currentNode); 
    }
    this_Swf9_3=ruleSwf9
    { 
        $current = $this_Swf9_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getNekoParserRuleCall_4(), currentNode); 
    }
    this_Neko_4=ruleNeko
    { 
        $current = $this_Neko_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getPhpParserRuleCall_5(), currentNode); 
    }
    this_Php_5=rulePhp
    { 
        $current = $this_Php_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getCppParserRuleCall_6(), currentNode); 
    }
    this_Cpp_6=ruleCpp
    { 
        $current = $this_Cpp_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getXmlParserRuleCall_7(), currentNode); 
    }
    this_Xml_7=ruleXml
    { 
        $current = $this_Xml_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getMainParserRuleCall_8(), currentNode); 
    }
    this_Main_8=ruleMain
    { 
        $current = $this_Main_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getLibParserRuleCall_9(), currentNode); 
    }
    this_Lib_9=ruleLib
    { 
        $current = $this_Lib_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getFlagParserRuleCall_10(), currentNode); 
    }
    this_Flag_10=ruleFlag
    { 
        $current = $this_Flag_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getVerboseParserRuleCall_11(), currentNode); 
    }
    this_Verbose_11=ruleVerbose
    { 
        $current = $this_Verbose_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDebugParserRuleCall_12(), currentNode); 
    }
    this_Debug_12=ruleDebug
    { 
        $current = $this_Debug_12.current; 
        currentNode = currentNode.getParent();
    }
);





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


