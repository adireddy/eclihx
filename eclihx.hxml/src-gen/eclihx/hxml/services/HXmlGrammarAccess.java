/*
* generated by Xtext
*/

package eclihx.hxml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HXmlGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//  elements+=Type*;
		public ParserRule getRule() { return rule; }

		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}

	public class ClasspathElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classpath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Classpath:
		//  "-cp" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-cp" value=STRING
		public Group getGroup() { return cGroup; }

		//"-cp"
		public Keyword getCpKeyword_0() { return cCpKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class JavascriptElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Javascript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Javascript:
		//  "-js" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-js" value=STRING
		public Group getGroup() { return cGroup; }

		//"-js"
		public Keyword getJsKeyword_0() { return cJsKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class SwfElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Swf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Swf:
		//  "-swf" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-swf" value=STRING
		public Group getGroup() { return cGroup; }

		//"-swf"
		public Keyword getSwfKeyword_0() { return cSwfKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class Swf9Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Swf9");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwf9Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Swf9:
		//  "-swf9" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-swf9" value=STRING
		public Group getGroup() { return cGroup; }

		//"-swf9"
		public Keyword getSwf9Keyword_0() { return cSwf9Keyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class NekoElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Neko");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNekoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Neko:
		//  "-neko" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-neko" value=STRING
		public Group getGroup() { return cGroup; }

		//"-neko"
		public Keyword getNekoKeyword_0() { return cNekoKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class PhpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Php");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Php:
		//  "-php" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-php" value=STRING
		public Group getGroup() { return cGroup; }

		//"-php"
		public Keyword getPhpKeyword_0() { return cPhpKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class CppElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cpp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Cpp:
		//  "-cpp" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-cpp" value=STRING
		public Group getGroup() { return cGroup; }

		//"-cpp"
		public Keyword getCppKeyword_0() { return cCppKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class XmlElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Xml:
		//  "-xml" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-xml" value=STRING
		public Group getGroup() { return cGroup; }

		//"-xml"
		public Keyword getXmlKeyword_0() { return cXmlKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class MainElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Main:
		//  "-main" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-main" value=STRING
		public Group getGroup() { return cGroup; }

		//"-main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class LibElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Lib:
		//  "-lib" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-lib" value=STRING
		public Group getGroup() { return cGroup; }

		//"-lib"
		public Keyword getLibKeyword_0() { return cLibKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class FlagElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Flag:
		//  "-D" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-D" value=STRING
		public Group getGroup() { return cGroup; }

		//"-D"
		public Keyword getDKeyword_0() { return cDKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class VerboseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verbose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Verbose:
		//  "-v" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-v" value=STRING
		public Group getGroup() { return cGroup; }

		//"-v"
		public Keyword getVKeyword_0() { return cVKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class DebugElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Debug");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDebugKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Debug:
		//  "-debug" value=STRING;
		public ParserRule getRule() { return rule; }

		//"-debug" value=STRING
		public Group getGroup() { return cGroup; }

		//"-debug"
		public Keyword getDebugKeyword_0() { return cDebugKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClasspathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJavascriptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSwf9ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNekoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPhpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCppParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXmlParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMainParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLibParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFlagParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVerboseParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDebugParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Type:
		//  Classpath|Javascript|Swf|Swf9|Neko|Php|Cpp|Xml|Main|Lib|Flag|Verbose|Debug;
		public ParserRule getRule() { return rule; }

		//Classpath|Javascript|Swf|Swf9|Neko|Php|Cpp|Xml|Main|Lib|Flag|Verbose|Debug
		public Alternatives getAlternatives() { return cAlternatives; }

		//Classpath
		public RuleCall getClasspathParserRuleCall_0() { return cClasspathParserRuleCall_0; }

		//Javascript
		public RuleCall getJavascriptParserRuleCall_1() { return cJavascriptParserRuleCall_1; }

		//Swf
		public RuleCall getSwfParserRuleCall_2() { return cSwfParserRuleCall_2; }

		//Swf9
		public RuleCall getSwf9ParserRuleCall_3() { return cSwf9ParserRuleCall_3; }

		//Neko
		public RuleCall getNekoParserRuleCall_4() { return cNekoParserRuleCall_4; }

		//Php
		public RuleCall getPhpParserRuleCall_5() { return cPhpParserRuleCall_5; }

		//Cpp
		public RuleCall getCppParserRuleCall_6() { return cCppParserRuleCall_6; }

		//Xml
		public RuleCall getXmlParserRuleCall_7() { return cXmlParserRuleCall_7; }

		//Main
		public RuleCall getMainParserRuleCall_8() { return cMainParserRuleCall_8; }

		//Lib
		public RuleCall getLibParserRuleCall_9() { return cLibParserRuleCall_9; }

		//Flag
		public RuleCall getFlagParserRuleCall_10() { return cFlagParserRuleCall_10; }

		//Verbose
		public RuleCall getVerboseParserRuleCall_11() { return cVerboseParserRuleCall_11; }

		//Debug
		public RuleCall getDebugParserRuleCall_12() { return cDebugParserRuleCall_12; }
	}
	
	
	private ModelElements pModel;
	private ClasspathElements pClasspath;
	private JavascriptElements pJavascript;
	private SwfElements pSwf;
	private Swf9Elements pSwf9;
	private NekoElements pNeko;
	private PhpElements pPhp;
	private CppElements pCpp;
	private XmlElements pXml;
	private MainElements pMain;
	private LibElements pLib;
	private FlagElements pFlag;
	private VerboseElements pVerbose;
	private DebugElements pDebug;
	private TypeElements pType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HXmlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  elements+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Classpath:
	//  "-cp" value=STRING;
	public ClasspathElements getClasspathAccess() {
		return (pClasspath != null) ? pClasspath : (pClasspath = new ClasspathElements());
	}
	
	public ParserRule getClasspathRule() {
		return getClasspathAccess().getRule();
	}

	//Javascript:
	//  "-js" value=STRING;
	public JavascriptElements getJavascriptAccess() {
		return (pJavascript != null) ? pJavascript : (pJavascript = new JavascriptElements());
	}
	
	public ParserRule getJavascriptRule() {
		return getJavascriptAccess().getRule();
	}

	//Swf:
	//  "-swf" value=STRING;
	public SwfElements getSwfAccess() {
		return (pSwf != null) ? pSwf : (pSwf = new SwfElements());
	}
	
	public ParserRule getSwfRule() {
		return getSwfAccess().getRule();
	}

	//Swf9:
	//  "-swf9" value=STRING;
	public Swf9Elements getSwf9Access() {
		return (pSwf9 != null) ? pSwf9 : (pSwf9 = new Swf9Elements());
	}
	
	public ParserRule getSwf9Rule() {
		return getSwf9Access().getRule();
	}

	//Neko:
	//  "-neko" value=STRING;
	public NekoElements getNekoAccess() {
		return (pNeko != null) ? pNeko : (pNeko = new NekoElements());
	}
	
	public ParserRule getNekoRule() {
		return getNekoAccess().getRule();
	}

	//Php:
	//  "-php" value=STRING;
	public PhpElements getPhpAccess() {
		return (pPhp != null) ? pPhp : (pPhp = new PhpElements());
	}
	
	public ParserRule getPhpRule() {
		return getPhpAccess().getRule();
	}

	//Cpp:
	//  "-cpp" value=STRING;
	public CppElements getCppAccess() {
		return (pCpp != null) ? pCpp : (pCpp = new CppElements());
	}
	
	public ParserRule getCppRule() {
		return getCppAccess().getRule();
	}

	//Xml:
	//  "-xml" value=STRING;
	public XmlElements getXmlAccess() {
		return (pXml != null) ? pXml : (pXml = new XmlElements());
	}
	
	public ParserRule getXmlRule() {
		return getXmlAccess().getRule();
	}

	//Main:
	//  "-main" value=STRING;
	public MainElements getMainAccess() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//Lib:
	//  "-lib" value=STRING;
	public LibElements getLibAccess() {
		return (pLib != null) ? pLib : (pLib = new LibElements());
	}
	
	public ParserRule getLibRule() {
		return getLibAccess().getRule();
	}

	//Flag:
	//  "-D" value=STRING;
	public FlagElements getFlagAccess() {
		return (pFlag != null) ? pFlag : (pFlag = new FlagElements());
	}
	
	public ParserRule getFlagRule() {
		return getFlagAccess().getRule();
	}

	//Verbose:
	//  "-v" value=STRING;
	public VerboseElements getVerboseAccess() {
		return (pVerbose != null) ? pVerbose : (pVerbose = new VerboseElements());
	}
	
	public ParserRule getVerboseRule() {
		return getVerboseAccess().getRule();
	}

	//Debug:
	//  "-debug" value=STRING;
	public DebugElements getDebugAccess() {
		return (pDebug != null) ? pDebug : (pDebug = new DebugElements());
	}
	
	public ParserRule getDebugRule() {
		return getDebugAccess().getRule();
	}

	//Type:
	//  Classpath|Javascript|Swf|Swf9|Neko|Php|Cpp|Xml|Main|Lib|Flag|Verbose|Debug;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
