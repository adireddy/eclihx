/*
* generated by Xtext
*/
package eclihx.hxml.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eclihx.hxml.services.HXmlGrammarAccess;

public class HXmlParser extends AbstractContentAssistParser {
	
	@Inject
	private HXmlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eclihx.hxml.contentassist.antlr.internal.InternalHXmlLexer createLexer(CharStream stream) {
		return new eclihx.hxml.contentassist.antlr.internal.InternalHXmlLexer(stream);
	}
	
	@Override
	protected eclihx.hxml.contentassist.antlr.internal.InternalHXmlParser createParser() {
		eclihx.hxml.contentassist.antlr.internal.InternalHXmlParser result = new eclihx.hxml.contentassist.antlr.internal.InternalHXmlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getClasspathAccess().getGroup(), "rule__Classpath__Group__0");
					put(grammarAccess.getJavascriptAccess().getGroup(), "rule__Javascript__Group__0");
					put(grammarAccess.getSwfAccess().getGroup(), "rule__Swf__Group__0");
					put(grammarAccess.getSwf9Access().getGroup(), "rule__Swf9__Group__0");
					put(grammarAccess.getNekoAccess().getGroup(), "rule__Neko__Group__0");
					put(grammarAccess.getPhpAccess().getGroup(), "rule__Php__Group__0");
					put(grammarAccess.getCppAccess().getGroup(), "rule__Cpp__Group__0");
					put(grammarAccess.getXmlAccess().getGroup(), "rule__Xml__Group__0");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getLibAccess().getGroup(), "rule__Lib__Group__0");
					put(grammarAccess.getFlagAccess().getGroup(), "rule__Flag__Group__0");
					put(grammarAccess.getVerboseAccess().getGroup(), "rule__Verbose__Group__0");
					put(grammarAccess.getDebugAccess().getGroup(), "rule__Debug__Group__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getClasspathAccess().getValueAssignment_1(), "rule__Classpath__ValueAssignment_1");
					put(grammarAccess.getJavascriptAccess().getValueAssignment_1(), "rule__Javascript__ValueAssignment_1");
					put(grammarAccess.getSwfAccess().getValueAssignment_1(), "rule__Swf__ValueAssignment_1");
					put(grammarAccess.getSwf9Access().getValueAssignment_1(), "rule__Swf9__ValueAssignment_1");
					put(grammarAccess.getNekoAccess().getValueAssignment_1(), "rule__Neko__ValueAssignment_1");
					put(grammarAccess.getPhpAccess().getValueAssignment_1(), "rule__Php__ValueAssignment_1");
					put(grammarAccess.getCppAccess().getValueAssignment_1(), "rule__Cpp__ValueAssignment_1");
					put(grammarAccess.getXmlAccess().getValueAssignment_1(), "rule__Xml__ValueAssignment_1");
					put(grammarAccess.getMainAccess().getValueAssignment_1(), "rule__Main__ValueAssignment_1");
					put(grammarAccess.getLibAccess().getValueAssignment_1(), "rule__Lib__ValueAssignment_1");
					put(grammarAccess.getFlagAccess().getValueAssignment_1(), "rule__Flag__ValueAssignment_1");
					put(grammarAccess.getVerboseAccess().getValueAssignment_1(), "rule__Verbose__ValueAssignment_1");
					put(grammarAccess.getDebugAccess().getValueAssignment_1(), "rule__Debug__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eclihx.hxml.contentassist.antlr.internal.InternalHXmlParser typedParser = (eclihx.hxml.contentassist.antlr.internal.InternalHXmlParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HXmlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HXmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
