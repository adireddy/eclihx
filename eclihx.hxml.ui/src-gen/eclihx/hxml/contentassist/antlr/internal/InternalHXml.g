/*
* generated by Xtext
*/
grammar InternalHXml;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package eclihx.hxml.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package eclihx.hxml.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import eclihx.hxml.services.HXmlGrammarAccess;

}

@parser::members {
 
 	private HXmlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(HXmlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
(rule__Model__ElementsAssignment)*
{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClasspath
entryRuleClasspath :
{ before(grammarAccess.getClasspathRule()); }
	 ruleClasspath
{ after(grammarAccess.getClasspathRule()); } 
	 EOF 
;

// Rule Classpath
ruleClasspath 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getClasspathAccess().getGroup()); }
(rule__Classpath__Group__0)
{ after(grammarAccess.getClasspathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavascript
entryRuleJavascript :
{ before(grammarAccess.getJavascriptRule()); }
	 ruleJavascript
{ after(grammarAccess.getJavascriptRule()); } 
	 EOF 
;

// Rule Javascript
ruleJavascript 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getJavascriptAccess().getGroup()); }
(rule__Javascript__Group__0)
{ after(grammarAccess.getJavascriptAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwf
entryRuleSwf :
{ before(grammarAccess.getSwfRule()); }
	 ruleSwf
{ after(grammarAccess.getSwfRule()); } 
	 EOF 
;

// Rule Swf
ruleSwf 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSwfAccess().getGroup()); }
(rule__Swf__Group__0)
{ after(grammarAccess.getSwfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwf9
entryRuleSwf9 :
{ before(grammarAccess.getSwf9Rule()); }
	 ruleSwf9
{ after(grammarAccess.getSwf9Rule()); } 
	 EOF 
;

// Rule Swf9
ruleSwf9 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSwf9Access().getGroup()); }
(rule__Swf9__Group__0)
{ after(grammarAccess.getSwf9Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNeko
entryRuleNeko :
{ before(grammarAccess.getNekoRule()); }
	 ruleNeko
{ after(grammarAccess.getNekoRule()); } 
	 EOF 
;

// Rule Neko
ruleNeko 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNekoAccess().getGroup()); }
(rule__Neko__Group__0)
{ after(grammarAccess.getNekoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhp
entryRulePhp :
{ before(grammarAccess.getPhpRule()); }
	 rulePhp
{ after(grammarAccess.getPhpRule()); } 
	 EOF 
;

// Rule Php
rulePhp 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getPhpAccess().getGroup()); }
(rule__Php__Group__0)
{ after(grammarAccess.getPhpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCpp
entryRuleCpp :
{ before(grammarAccess.getCppRule()); }
	 ruleCpp
{ after(grammarAccess.getCppRule()); } 
	 EOF 
;

// Rule Cpp
ruleCpp 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getCppAccess().getGroup()); }
(rule__Cpp__Group__0)
{ after(grammarAccess.getCppAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXml
entryRuleXml :
{ before(grammarAccess.getXmlRule()); }
	 ruleXml
{ after(grammarAccess.getXmlRule()); } 
	 EOF 
;

// Rule Xml
ruleXml 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getXmlAccess().getGroup()); }
(rule__Xml__Group__0)
{ after(grammarAccess.getXmlAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMain
entryRuleMain :
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getMainAccess().getGroup()); }
(rule__Main__Group__0)
{ after(grammarAccess.getMainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLib
entryRuleLib :
{ before(grammarAccess.getLibRule()); }
	 ruleLib
{ after(grammarAccess.getLibRule()); } 
	 EOF 
;

// Rule Lib
ruleLib 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getLibAccess().getGroup()); }
(rule__Lib__Group__0)
{ after(grammarAccess.getLibAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlag
entryRuleFlag :
{ before(grammarAccess.getFlagRule()); }
	 ruleFlag
{ after(grammarAccess.getFlagRule()); } 
	 EOF 
;

// Rule Flag
ruleFlag 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getFlagAccess().getGroup()); }
(rule__Flag__Group__0)
{ after(grammarAccess.getFlagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerbose
entryRuleVerbose :
{ before(grammarAccess.getVerboseRule()); }
	 ruleVerbose
{ after(grammarAccess.getVerboseRule()); } 
	 EOF 
;

// Rule Verbose
ruleVerbose 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVerboseAccess().getGroup()); }
(rule__Verbose__Group__0)
{ after(grammarAccess.getVerboseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDebug
entryRuleDebug :
{ before(grammarAccess.getDebugRule()); }
	 ruleDebug
{ after(grammarAccess.getDebugRule()); } 
	 EOF 
;

// Rule Debug
ruleDebug 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getDebugAccess().getGroup()); }
(rule__Debug__Group__0)
{ after(grammarAccess.getDebugAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType :
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getClasspathParserRuleCall_0()); }
	ruleClasspath
{ after(grammarAccess.getTypeAccess().getClasspathParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getJavascriptParserRuleCall_1()); }
	ruleJavascript
{ after(grammarAccess.getTypeAccess().getJavascriptParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSwfParserRuleCall_2()); }
	ruleSwf
{ after(grammarAccess.getTypeAccess().getSwfParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSwf9ParserRuleCall_3()); }
	ruleSwf9
{ after(grammarAccess.getTypeAccess().getSwf9ParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getNekoParserRuleCall_4()); }
	ruleNeko
{ after(grammarAccess.getTypeAccess().getNekoParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getPhpParserRuleCall_5()); }
	rulePhp
{ after(grammarAccess.getTypeAccess().getPhpParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getCppParserRuleCall_6()); }
	ruleCpp
{ after(grammarAccess.getTypeAccess().getCppParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getXmlParserRuleCall_7()); }
	ruleXml
{ after(grammarAccess.getTypeAccess().getXmlParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getMainParserRuleCall_8()); }
	ruleMain
{ after(grammarAccess.getTypeAccess().getMainParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getLibParserRuleCall_9()); }
	ruleLib
{ after(grammarAccess.getTypeAccess().getLibParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getFlagParserRuleCall_10()); }
	ruleFlag
{ after(grammarAccess.getTypeAccess().getFlagParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getVerboseParserRuleCall_11()); }
	ruleVerbose
{ after(grammarAccess.getTypeAccess().getVerboseParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDebugParserRuleCall_12()); }
	ruleDebug
{ after(grammarAccess.getTypeAccess().getDebugParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Classpath__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClasspathAccess().getCpKeyword_0()); }

	'-cp' 

{ after(grammarAccess.getClasspathAccess().getCpKeyword_0()); }
)

	rule__Classpath__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Classpath__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClasspathAccess().getValueAssignment_1()); }
(rule__Classpath__ValueAssignment_1)
{ after(grammarAccess.getClasspathAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Javascript__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavascriptAccess().getJsKeyword_0()); }

	'-js' 

{ after(grammarAccess.getJavascriptAccess().getJsKeyword_0()); }
)

	rule__Javascript__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Javascript__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavascriptAccess().getValueAssignment_1()); }
(rule__Javascript__ValueAssignment_1)
{ after(grammarAccess.getJavascriptAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Swf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwfAccess().getSwfKeyword_0()); }

	'-swf' 

{ after(grammarAccess.getSwfAccess().getSwfKeyword_0()); }
)

	rule__Swf__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Swf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwfAccess().getValueAssignment_1()); }
(rule__Swf__ValueAssignment_1)
{ after(grammarAccess.getSwfAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Swf9__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwf9Access().getSwf9Keyword_0()); }

	'-swf9' 

{ after(grammarAccess.getSwf9Access().getSwf9Keyword_0()); }
)

	rule__Swf9__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Swf9__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwf9Access().getValueAssignment_1()); }
(rule__Swf9__ValueAssignment_1)
{ after(grammarAccess.getSwf9Access().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Neko__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNekoAccess().getNekoKeyword_0()); }

	'-neko' 

{ after(grammarAccess.getNekoAccess().getNekoKeyword_0()); }
)

	rule__Neko__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Neko__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNekoAccess().getValueAssignment_1()); }
(rule__Neko__ValueAssignment_1)
{ after(grammarAccess.getNekoAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Php__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhpAccess().getPhpKeyword_0()); }

	'-php' 

{ after(grammarAccess.getPhpAccess().getPhpKeyword_0()); }
)

	rule__Php__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Php__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhpAccess().getValueAssignment_1()); }
(rule__Php__ValueAssignment_1)
{ after(grammarAccess.getPhpAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cpp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCppAccess().getCppKeyword_0()); }

	'-cpp' 

{ after(grammarAccess.getCppAccess().getCppKeyword_0()); }
)

	rule__Cpp__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Cpp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCppAccess().getValueAssignment_1()); }
(rule__Cpp__ValueAssignment_1)
{ after(grammarAccess.getCppAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Xml__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXmlAccess().getXmlKeyword_0()); }

	'-xml' 

{ after(grammarAccess.getXmlAccess().getXmlKeyword_0()); }
)

	rule__Xml__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Xml__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXmlAccess().getValueAssignment_1()); }
(rule__Xml__ValueAssignment_1)
{ after(grammarAccess.getXmlAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Main__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getMainKeyword_0()); }

	'-main' 

{ after(grammarAccess.getMainAccess().getMainKeyword_0()); }
)

	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getValueAssignment_1()); }
(rule__Main__ValueAssignment_1)
{ after(grammarAccess.getMainAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lib__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibAccess().getLibKeyword_0()); }

	'-lib' 

{ after(grammarAccess.getLibAccess().getLibKeyword_0()); }
)

	rule__Lib__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Lib__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibAccess().getValueAssignment_1()); }
(rule__Lib__ValueAssignment_1)
{ after(grammarAccess.getLibAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Flag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlagAccess().getDKeyword_0()); }

	'-D' 

{ after(grammarAccess.getFlagAccess().getDKeyword_0()); }
)

	rule__Flag__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Flag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlagAccess().getValueAssignment_1()); }
(rule__Flag__ValueAssignment_1)
{ after(grammarAccess.getFlagAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Verbose__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerboseAccess().getVKeyword_0()); }

	'-v' 

{ after(grammarAccess.getVerboseAccess().getVKeyword_0()); }
)

	rule__Verbose__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Verbose__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerboseAccess().getValueAssignment_1()); }
(rule__Verbose__ValueAssignment_1)
{ after(grammarAccess.getVerboseAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Debug__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebugAccess().getDebugKeyword_0()); }

	'-debug' 

{ after(grammarAccess.getDebugAccess().getDebugKeyword_0()); }
)

	rule__Debug__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Debug__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebugAccess().getValueAssignment_1()); }
(rule__Debug__ValueAssignment_1)
{ after(grammarAccess.getDebugAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsTypeParserRuleCall_0()); }
	ruleType{ after(grammarAccess.getModelAccess().getElementsTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classpath__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClasspathAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getClasspathAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Javascript__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavascriptAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getJavascriptAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Swf__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwfAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getSwfAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Swf9__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwf9Access().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getSwf9Access().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Neko__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNekoAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getNekoAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Php__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhpAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getPhpAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cpp__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCppAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getCppAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXmlAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getXmlAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Main__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getMainAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lib__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getLibAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Flag__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlagAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getFlagAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Verbose__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerboseAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVerboseAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Debug__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebugAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getDebugAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


